#!/bin/bash
# ARG_OPTIONAL_SINGLE([role-name],[r],[Specify the role name])
# ARG_OPTIONAL_SINGLE([template],[t],[Specify the role template],[default])
# ARG_OPTIONAL_BOOLEAN([input],[],[Ask for cookiecutter input])
# ARG_HELP([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='rth'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_role_name=
_arg_template="default"
_arg_input="off"


print_help()
{
	printf 'Usage: %s [-r|--role-name <arg>] [-t|--template <arg>] [--(no-)input] [-h|--help]\n' "$0"
	printf '\t%s\n' "-r, --role-name: Specify the role name (no default)"
	printf '\t%s\n' "-t, --template: Specify the role template (default: 'default')"
	printf '\t%s\n' "--input, --no-input: Ask for cookiecutter input (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-r|--role-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_role_name="$2"
				shift
				;;
			--role-name=*)
				_arg_role_name="${_key##--role-name=}"
				;;
			-r*)
				_arg_role_name="${_key##-r}"
				;;
			-t|--template)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_template="$2"
				shift
				;;
			--template=*)
				_arg_template="${_key##--template=}"
				;;
			-t*)
				_arg_template="${_key##-t}"
				;;
			--no-input|--input)
				_arg_input="on"
				test "${1:0:5}" = "--no-" && _arg_input="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#

git_addr=

case "$_arg_template" in
    default)
        git_addr=https://github.com/joscherrer/ansible-role-skeleton.git
        ;;
    build)
        git_addr=https://github.com/joscherrer/ansible-role-skelbuild.git
        ;;
    *)
        echo "Usage: initrole {default|build} <role_name>"
        exit 1
esac

if [ "$_arg_input" = "off" ]; then
    input="--no-input"
fi

if [ -z "$_arg_role_name" ]; then
    _PRINT_HELP=yes die
fi

echo "Creating $_arg_role_name from $git_addr"
cookiecutter "$git_addr" $input role_name="$_arg_role_name" && echo "Created role $_arg_role_name"

#
# ] <-- needed because of Argbash